/*
  Author:         Tracy Liang
  Student #:      32132532
  UBC email:      tracy53@student.ubc.ca
  Course:         IGEN 230 001 / L0A (Term 1)
  Project Name:   Line-following Robot
   
  some notes:
    - 5 phototransmitter (PT) sensors w. 2 motors (for track 3 1st way)
    - PTs take black / white input and motors run accordingly to follow a black line
    - LEDs turn on when black line is detected. AKA [if PT reads black (greater than 400) then turn LED (indicates detection of black)]
  
    - H-Bridge fxn modes: high low = forwards
    - H-Bridge fxn modes: low high = backwards
    - BWWWW abbreviations show in order of PT sensors 12345 w. B=black, W=white
*/

// defining threshold values
int th1 = 400;     // sensorValue greater than threshold value means black
int th2 = 400;     // sensorValue greater than threshold value means black
int th3 = 400;     // sensorValue greater than threshold value means black
int th4 = 400;     // sensorValue greater than threshold value means black
int th5 = 400;     // sensorValue greater than threshold value means black

const int xmas = 8;          // digital output pin that the LEDs are attached to
const int led1 = 9;          // digital output pin that the LED is attached to
const int led2 = 10;         // digital output pin that the LED is attached to
const int led3 = 11;         // digital output pin that the LED is attached to
const int led4 = 12;         // digital output pin that the LED is attached to
const int led5 = 13;         // digital output pin that the LED is attached to

const int enAPin = 6;   // left motor PWM speed control
const int in1Pin = 7;   // left motor direction 1
const int in2Pin = 5;   // left motor direction 2
const int in3Pin = 4;   // right motor direction 1
const int in4Pin = 2;   // right motor direction 2
const int enBPin = 3;   // right motor PWM speed control



void setup() {
  pinMode(xmas, OUTPUT);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);
  pinMode(led4, OUTPUT);  
  pinMode(led5, OUTPUT);  
  
  pinMode(enAPin, OUTPUT);
  pinMode(in1Pin, OUTPUT);
  pinMode(in2Pin, OUTPUT);
  pinMode(in3Pin, OUTPUT);
  pinMode(in4Pin, OUTPUT);
  pinMode(enBPin, OUTPUT); 
  Serial.begin(9600);     // initialize serial communications at 9600 bps
}

void Forwards(){
  digitalWrite(in1Pin,HIGH);  //left wheel forward 
  digitalWrite(in2Pin,LOW); 
  digitalWrite(in3Pin,HIGH);  //Right wheel forward 
  digitalWrite(in4Pin,LOW); 
  analogWrite(enAPin, 130);
  analogWrite(enBPin, 130);
}

void Backwards(){
  digitalWrite(in1Pin,LOW);   //left wheel back 
  digitalWrite(in2Pin,HIGH); 
  digitalWrite(in3Pin,LOW);   //Right wheel back 
  digitalWrite(in4Pin,HIGH); 
  analogWrite(enAPin, 140);
  analogWrite(enBPin, 140);
}

void HRight(){
  digitalWrite(in1Pin,HIGH);   //left wheel front very little
  digitalWrite(in2Pin,LOW); 
  digitalWrite(in3Pin,LOW);   //Right wheel back a lot
  digitalWrite(in4Pin,HIGH); 
  analogWrite(enAPin, 120);
  analogWrite(enBPin, 170);
}

void TRight(){
  digitalWrite(in1Pin,HIGH);  //left wheel forward 
  digitalWrite(in2Pin,LOW); 
  digitalWrite(in3Pin,LOW);   //Right wheel back 
  digitalWrite(in4Pin,HIGH); 
  analogWrite(enAPin, 130);
  analogWrite(enBPin, 140); 
}

void TRightlil(){
  digitalWrite(in1Pin,HIGH);  //left wheel forward 
  digitalWrite(in2Pin,LOW); 
  digitalWrite(in3Pin,LOW);   //Right wheel back 
  digitalWrite(in4Pin,HIGH); 
  analogWrite(enAPin, 125);
  analogWrite(enBPin, 132); 
}

void HLeft(){
  digitalWrite(in1Pin,LOW);   //left wheel back a lot
  digitalWrite(in2Pin,HIGH); 
  digitalWrite(in3Pin,HIGH);   //Right wheel front very little
  digitalWrite(in4Pin,LOW); 
  analogWrite(enAPin, 170);
  analogWrite(enBPin, 120);
}

void TLeft(){
  digitalWrite(in1Pin,LOW);   //left wheel back 
  digitalWrite(in2Pin,HIGH); 
  digitalWrite(in3Pin,HIGH);  //Right wheel forward 
  digitalWrite(in4Pin,LOW); 
  analogWrite(enAPin, 140);
  analogWrite(enBPin, 130);
}

void TLeftlil(){
  digitalWrite(in1Pin,LOW);   //left wheel back 
  digitalWrite(in2Pin,HIGH); 
  digitalWrite(in3Pin,HIGH);  //Right wheel forward 
  digitalWrite(in4Pin,LOW); 
  analogWrite(enAPin, 132);
  analogWrite(enBPin, 125);
}

void Hairpin(){
  digitalWrite(in1Pin,LOW);   //left wheel back 
  digitalWrite(in2Pin,HIGH); 
  digitalWrite(in3Pin,HIGH);  //Right wheel forward 
  digitalWrite(in4Pin,LOW); 
  analogWrite(enAPin, 150);
  analogWrite(enBPin, 130);
}

void Stop(){
  digitalWrite(in1Pin,LOW);   //left wheel stop 
  digitalWrite(in2Pin,LOW); 
  digitalWrite(in3Pin,LOW);   //Right wheel stop 
  digitalWrite(in4Pin,LOW); 
  analogWrite(enAPin, 0);
  analogWrite(enBPin, 0);
}



void loop() {
  int val1 = analogRead(A1);             // read the analog in value
  int val2 = analogRead(A2);             // read the analog in value
  int val3 = analogRead(A3);             // read the analog in value
  int val4 = analogRead(A4);             // read the analog in value
  int val5 = analogRead(A5);             // read the analog in value
  digitalWrite(xmas, HIGH);               // turn on christmas tree LEDs

  
if (val1>th1 && val2<th2 && val3<th3 && val4<th4 && val5<th5) {                            //BWWWW turn left
    digitalWrite(led1, HIGH);                            // change the digital out value 
    TLeft();
    Serial.print("sensor 1 = ");                         // print the results to the Serial Monitor:
    Serial.println(val1);
}
else if (val1<th1 && val2>th2 && val3<th3 && val4<th4 && val5<th5) {                        //WBWWW turn left little bit
    digitalWrite(led2, HIGH);                            // change the digital out value 
    TLeftlil();
    Serial.print("sensor 2 = ");                         // print the results to the Serial Monitor:
    Serial.println(val2);
}
else if (val1<th1 && val2<th2 && val3>th3 && val4<th4 && val5<th5) {                        //WWBWW forward
    digitalWrite(led3, HIGH);                            // change the digital out value 
    Forwards();
    Serial.print("sensor 3 = ");                         // print the results to the Serial Monitor:
    Serial.println(val3);
}
else if (val1<th1 && val2<th2 && val3<th3 && val4>th4 && val5<th5) {                        //WWWBW turn right little bit
    digitalWrite(led4, HIGH);                            // change the digital out value 
    TRightlil();
    Serial.print("sensor 4 = ");                         // print the results to the Serial Monitor:
    Serial.println(val4);
}
else if (val1<th1 && val2<th2 && val3<th3 && val4<th4 && val5>th5) {                        //WWWWB turn right
    digitalWrite(led5, HIGH);                            // change the digital out value 
    HRight();
    Serial.print("sensor 5 = ");                         // print the results to the Serial Monitor:
    Serial.println(val5);
}


else if (val1>th1 && val2>th2 && val3<th3 && val4<th4 && val5<th5) {                        //BBWWW turn left
    digitalWrite(led1, HIGH);                            // change the digital out value 
    digitalWrite(led2, HIGH);                            // change the digital out value 
    TLeft();
}
else if (val1<th1 && val2>th2 && val3>th3 && val4<th4 && val5<th5) {                        //WBBWW turn left lil
    digitalWrite(led2, HIGH);                            // change the digital out value 
    digitalWrite(led3, HIGH);                            // change the digital out value 
    TLeftlil();
}
else if (val1<th1 && val2<th2 && val3>th3 && val4>th4 && val5<th5) {                        //WWBBW turn right lil
    digitalWrite(led3, HIGH);                            // change the digital out value 
    digitalWrite(led4, HIGH);                            // change the digital out value 
    TRightlil();
}
else if (val1<th1 && val2<th2 && val3<th3 && val4>th4 && val5>th5) {                        //WWWBB turn right
    digitalWrite(led4, HIGH);                            // change the digital out value 
    digitalWrite(led5, HIGH);                            // change the digital out value 
    TRight();
}


else if (val1>th1 && val2>th2 && val3>th3 && val4<th4 && val5<th5) {                        //BBBWW hard left
    digitalWrite(led1, HIGH);                            // change the digital out value 
    digitalWrite(led2, HIGH);                            // change the digital out value 
    digitalWrite(led3, HIGH);                            // change the digital out value 
    HLeft();
}
else if (val1<th1 && val2<th2 && val3>th3 && val4>th4 && val5>th5) {                        //WWBBB hard right
    digitalWrite(led3, HIGH);                            // change the digital out value 
    digitalWrite(led4, HIGH);                            // change the digital out value 
    digitalWrite(led5, HIGH);                            // change the digital out value 
    HRight();
}
else if (val1>th1 && val2>th2 && val3>th3 && val4>th4 && val5<th5) {                        //BBBBW forwards? (fix if needed)
    digitalWrite(led1, HIGH);                            // change the digital out value 
    digitalWrite(led2, HIGH);                            // change the digital out value 
    digitalWrite(led3, HIGH);                            // change the digital out value 
    digitalWrite(led4, HIGH);                            // change the digital out value 
    Forwards();
}
else if (val1<th1 && val2>th2 && val3>th3 && val4>th4 && val5>th5) {                        //WBBBB forwards? (fix if needed)
    digitalWrite(led2, HIGH);                            // change the digital out value 
    digitalWrite(led3, HIGH);                            // change the digital out value 
    digitalWrite(led4, HIGH);                            // change the digital out value 
    digitalWrite(led5, HIGH);                            // change the digital out value 
    Forwards();
}

else if (val1>th1 && val2<th2 && val3>th3 && val4<th4 && val5>th5) {                        //BWBWB forwards? (fix if needed)
    digitalWrite(led1, HIGH);                            // change the digital out value 
    digitalWrite(led3, HIGH);                            // change the digital out value 
    digitalWrite(led5, HIGH);                            // change the digital out value 
    Forwards();
}
else if (val1>th1 && val2<th2 && val3>th3 && val4<th4 && val5<th5) {                        //BWBWW hairpin, turn left by about 150 degrees
    digitalWrite(led1, HIGH);                            // change the digital out value 
    digitalWrite(led3, HIGH);                            // change the digital out value 
    Hairpin();
}
else if (val1<th1 && val2<th2 && val3>th3 && val4<th4 && val5>th5) {                        //WWBWB hairpin, turn left by about 150 degrees
    digitalWrite(led1, HIGH);                            // change the digital out value 
    digitalWrite(led3, HIGH);                            // change the digital out value 
    Forwards();
}



else if (val1>th1 && val2>th2 && val3>th3 && val4>th4 && val5>th5) {                        //BBBBB forwards
    digitalWrite(led1, HIGH);                            // change the digital out value 
    digitalWrite(led2, HIGH);                            // change the digital out value 
    digitalWrite(led3, HIGH);                            // change the digital out value 
    digitalWrite(led4, HIGH);                            // change the digital out value 
    digitalWrite(led5, HIGH);                            // change the digital out value 
    Forwards();
}
else if (val1<th1 && val2<th2 && val3<th3 && val4<th4 && val5<th5) {                        //WWWWW forwards
    Forwards(); 
}
 
 
  // wait before turning LED off
  delay(30);
  digitalWrite(led1, LOW);                            // change the digital out value 
  digitalWrite(led2, LOW);                            // change the digital out value 
  digitalWrite(led3, LOW);                            // change the digital out value 
  digitalWrite(led4, LOW);                            // change the digital out value 
  digitalWrite(led5, LOW);                            // change the digital out value 
  //delay(20);                                          // wait before the next loop for the next reading
  // longer delay allows for any gaps in line track to be neglected and robot goes thru gap without making any changes
  // track 2 has no gaps
}
